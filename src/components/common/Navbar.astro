---
import DarkModeToggle from "../common/DarkModeToggle.astro";
import Logo from "./Logo.astro";
import HamburgerButton from "./HamburgerButton.astro";

export interface Props {
  links: { name: string; href: string; class?: string }[]
}

const { links = [] } = Astro.props
---

<style>
  ul li a.active{
    color: var(--color-primary);
  }
</style>

<nav class="bg-background dark:bg-dark-background w-full fixed z-100">
  <div class="max-w-screen-xl flex flex-wrap items-center justify-between mx-auto p-4">
    <Logo />
    
    <div class="hidden w-full lg:block lg:w-auto" id="navbar-default">
      <ul class="border-gray-100 rounded-lg bg-background dark:bg-dark-background dark:border-dark-background font-medium flex flex-col p-4 lg:p-0 mt-4 border  lg:flex-row lg:space-x-8 rtl:space-x-reverse lg:mt-0 lg:border-0">
        {links.map(link => (
          <li>
            <a
              href={link.href}
              class={`text-text hover:bg-primary md:hover:text-primary dark:text-background md:dark:hover:text-primary dark:hover:bg-gray-100 dark:hover:text-primary block py-2 px-3 rounded-sm md:hover:bg-transparent md:border-0 md:p-0 md:dark:hover:bg-transparent ${link.class}`}
              class="text-text hover:bg-primary md:hover:text-primary dark:text-background md:dark:hover:text-primary dark:hover:bg-gray-100 dark:hover:text-primary block py-2 px-3 rounded-sm md:hover:bg-transparent md:border-0 md:p-0 md:dark:hover:bg-transparent"
            >
              {link.name}
            </a>
          </li>
        ))}
      </ul>
    </div>
    <div class="flex items-center gap-4">
      <DarkModeToggle />
      
      <div class="hidden lg:flex">
        <button
          type="button"
          class="text-gray-900 bg-white border-gray-300 hover:bg-gray-100 focus:ring-gray-100 dark:bg-dark-background dark:text-white dark:border-gray-600 dark:hover:bg-gray-700 dark:hover:border-gray-600 dark:focus:ring-gray-700 cursor-pointer border focus:outline-none focus:ring-4 font-medium rounded-lg text-sm px-5 py-2.5 me-2"
        >
          Light
        </button>
      </div>

      <div class="lg:hidden">
        <HamburgerButton />
      </div>
    </div>
  </div>
</nav>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const toggleButton = document.querySelector('[data-collapse-toggle]');
    const menu = document.getElementById('navbar-default');

    // Cerrar el menú al hacer clic fuera
    document.addEventListener('click', (event) => {
      const isClickInside = toggleButton.contains(event.target) || menu.contains(event.target);
      const isVisible = !menu.classList.contains('hidden');

      if (!isClickInside && isVisible) {
        toggleButton.click(); // ¡Simula el clic para que Flowbite lo cierre!
      }
    });

    // Cerrar al hacer clic en un link, solo en móvil
    const navLinks = menu.querySelectorAll('a');
    navLinks.forEach(link => {
      link.addEventListener('click', () => {
        if (window.innerWidth < 1024 && !menu.classList.contains('hidden')) {
          toggleButton.click(); // Simula clic de nuevo
        }
      });
    });
  });
</script>
